{"version":3,"sources":["Coin.js","App.js","registerServiceWorker.js","index.js"],"names":["Coin","name","price","symbol","marketcap","volume","image","priceChange","className","src","alt","toLocaleString","toFixed","App","useState","coins","setCoins","search","setSearch","useEffect","axios","get","then","res","data","console","log","catch","error","filteredCoins","filter","coin","toLowerCase","includes","type","onChange","e","target","value","placeholder","map","key","id","current_price","total_volume","market_cap","price_change_percentage_24h","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f79c7336.chunk.js","sourcesContent":["import React from 'react';\nimport './Coin.css';\n\nconst Coin = ({\n  name,\n  price,\n  symbol,\n  marketcap,\n  volume,\n  image,\n  priceChange\n}) => {\n  return (\n    <div className='coin-container'>\n      <div className='coin-row'>\n        <div className='coin'>\n          <img src={image} alt='crypto' />\n          <h1>{name}</h1>\n          <p className='coin-symbol'>{symbol}</p>\n        </div>\n        <div className='coin-data'>\n          <p className='coin-price'>${price}</p>\n          <p className='coin-volume'>${volume.toLocaleString()}</p>\n\n          {priceChange < 0 ? (\n            <p className='coin-percent red'>{priceChange.toFixed(2)}%</p>\n          ) : (\n            <p className='coin-percent green'>{priceChange.toFixed(2)}%</p>\n          )}\n\n          <p className='coin-marketcap'>\n            Mkt Cap: ${marketcap.toLocaleString()}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Coin;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Coin from './Coin';\n\nfunction App() {\n  const [coins, setCoins] = useState([]);\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    axios\n      .get(\n        'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=false'\n      )\n      .then(res => {\n        setCoins(res.data);\n        console.log(res.data);\n      })\n      .catch(error => console.log(error));\n  }, []);\n\n  const handleChange = e => {\n    setSearch(e.target.value);\n  };\n\n  const filteredCoins = coins.filter(coin =>\n    coin.name.toLowerCase().includes(search.toLowerCase())\n  );\n\n  return (\n    <div className='coin-app'>\n      <div className='coin-search'>\n        <h1 className='coin-text'>Search a currency</h1>\n        <form>\n          <input\n            className='coin-input'\n            type='text'\n            onChange={handleChange}\n            placeholder='Search'\n          />\n        </form>\n      </div>\n      {filteredCoins.map(coin => {\n        return (\n          <Coin\n            key={coin.id}\n            name={coin.name}\n            price={coin.current_price}\n            symbol={coin.symbol}\n            marketcap={coin.total_volume}\n            volume={coin.market_cap}\n            image={coin.image}\n            priceChange={coin.price_change_percentage_24h}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nregisterServiceWorker();"],"sourceRoot":""}